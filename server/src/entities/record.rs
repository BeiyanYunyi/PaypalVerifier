//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use std::error::Error;

use crate::api::{BriefPayment, BriefPaymentBuilder, ToBriefPayment};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "record")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub order_id: String,
  pub authorization_id: String,
  pub capture_id: Option<String>,
  pub create_time: Option<String>,
  #[sea_orm(column_type = "Text")]
  pub payer_email: String,
  #[sea_orm(unique)]
  pub payer_id: String,
  pub used: bool,
}

impl ToBriefPayment for Model {
  fn to_brief_payment(&self) -> Result<BriefPayment, Box<dyn Error>> {
    Ok(
      BriefPaymentBuilder::default()
        .authorization_id(self.authorization_id.clone())
        .order_id(self.order_id.clone())
        .payer_id(self.payer_id.clone())
        .payer_email(self.payer_email.clone())
        .create_time(self.create_time.clone())
        .build()?,
    )
  }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
